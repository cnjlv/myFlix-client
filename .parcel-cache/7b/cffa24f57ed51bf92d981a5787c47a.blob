var helpers = require("../../../../../../AppData/Roaming/nvm/v14.16.1/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LoginView", ()=>LoginView
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _form = require("react-bootstrap/Form");
var _formDefault = parcelHelpers.interopDefault(_form);
var _button = require("react-bootstrap/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _reactRouterDom = require("react-router-dom");
var _loginViewScss = require("./login-view.scss");
var _s = $RefreshSig$();
function LoginView(props) {
    _s();
    const [username, setUsername] = _react.useState('');
    const [password, setPassword] = _react.useState('');
    const [usernameError, setUsernameError] = _react.useState({
    });
    const [passwordError, setPasswordError] = _react.useState({
    });
    const handleSubmit = (e)=>{
        e.preventDefault();
        const isValid = formValidation();
        if (isValid) _axiosDefault.default.post('https://cnjlv.herokuapp.com/login', {
            Username: username,
            Password: password
        }).then((response)=>{
            const data = response.data;
            console.log('data', data);
            props.onLoggedIn(data);
            window.open("/");
        }).catch((e1)=>{
            console.log('error', e1);
        });
    };
    const formValidation = ()=>{
        const usernameError1 = {
        };
        const passwordError1 = {
        };
        let isValid = true;
        if (username.trim().length < 1) {
            usernameError1.usernameShort = "Username is required";
            isValid = false;
        }
        if (password.trim().length < 1) {
            passwordError1.passwordMissing = "Password is required";
            isValid = false;
        }
        setUsernameError(usernameError1);
        setPasswordError(passwordError1);
        return isValid;
    };
    return(/*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default, {
        __source: {
            fileName: "C:\\Users\\camel\\Documents\\GitHub\\myFlix-client\\src\\components\\login-view\\login-view.jsx",
            lineNumber: 58
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Group, {
        controlId: "formUsername",
        __source: {
            fileName: "C:\\Users\\camel\\Documents\\GitHub\\myFlix-client\\src\\components\\login-view\\login-view.jsx",
            lineNumber: 59
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Label, {
        __source: {
            fileName: "C:\\Users\\camel\\Documents\\GitHub\\myFlix-client\\src\\components\\login-view\\login-view.jsx",
            lineNumber: 60
        },
        __self: this
    }, "Username"), /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Control, {
        type: "text",
        onChange: (e)=>setUsername(e.target.value)
        ,
        __source: {
            fileName: "C:\\Users\\camel\\Documents\\GitHub\\myFlix-client\\src\\components\\login-view\\login-view.jsx",
            lineNumber: 61
        },
        __self: this
    })), Object.keys(usernameError).map((key)=>{
        return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
            key: key,
            __source: {
                fileName: "C:\\Users\\camel\\Documents\\GitHub\\myFlix-client\\src\\components\\login-view\\login-view.jsx",
                lineNumber: 66
            },
            __self: this
        }, usernameError[key]));
    }), /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Group, {
        controlId: "formPassword",
        __source: {
            fileName: "C:\\Users\\camel\\Documents\\GitHub\\myFlix-client\\src\\components\\login-view\\login-view.jsx",
            lineNumber: 72
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Label, {
        __source: {
            fileName: "C:\\Users\\camel\\Documents\\GitHub\\myFlix-client\\src\\components\\login-view\\login-view.jsx",
            lineNumber: 73
        },
        __self: this
    }, "Password"), /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Control, {
        type: "password",
        onChange: (e)=>setPassword(e.target.value)
        ,
        __source: {
            fileName: "C:\\Users\\camel\\Documents\\GitHub\\myFlix-client\\src\\components\\login-view\\login-view.jsx",
            lineNumber: 74
        },
        __self: this
    })), Object.keys(passwordError).map((key)=>{
        return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
            key: key,
            __source: {
                fileName: "C:\\Users\\camel\\Documents\\GitHub\\myFlix-client\\src\\components\\login-view\\login-view.jsx",
                lineNumber: 79
            },
            __self: this
        }, usernameError[key]));
    }), /*#__PURE__*/ _reactDefault.default.createElement(_buttonDefault.default, {
        variant: "dark",
        type: "submit",
        onClick: handleSubmit,
        __source: {
            fileName: "C:\\Users\\camel\\Documents\\GitHub\\myFlix-client\\src\\components\\login-view\\login-view.jsx",
            lineNumber: 85
        },
        __self: this
    }, "Login"), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Link, {
        to: `/register`,
        __source: {
            fileName: "C:\\Users\\camel\\Documents\\GitHub\\myFlix-client\\src\\components\\login-view\\login-view.jsx",
            lineNumber: 87
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement(_buttonDefault.default, {
        variant: "dark",
        __source: {
            fileName: "C:\\Users\\camel\\Documents\\GitHub\\myFlix-client\\src\\components\\login-view\\login-view.jsx",
            lineNumber: 88
        },
        __self: this
    }, "New here? Register"))));
}
_s(LoginView, "Lnry4UU+NkjRgin55tt8rHmJj2o=");
_c = LoginView;
LoginView.propTypes = {
    user: _propTypesDefault.default.shape({
        Username: _propTypesDefault.default.string.isRequired,
        Password: _propTypesDefault.default.string.isRequired
    }),
    onLoggedIn: _propTypesDefault.default.func
};
var _c;
$RefreshReg$(_c, "LoginView");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}